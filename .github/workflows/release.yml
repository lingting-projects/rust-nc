name: Release Ci

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2025 ]
        rust: [ stable ]

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 缓存 Wix
        if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v4
        id: cache-wix
        with:
          path: C:\Program Files (x86)\WiX Toolset v6.0
          key: ${{ runner.os }}-wix
      - name: 安装 Wix
        if: ${{ runner.os == 'Windows' && steps.cache-wix.outputs.cache-hit != 'true'}}
        shell: pwsh
        run: |
          $wixMsiUrl = "https://github.com/wixtoolset/wix/releases/download/v6.0.1/wix-cli-x64.msi"
          New-Item -ItemType Directory -Path ~\wix -Force | Out-Null
          Invoke-WebRequest -Uri $wixMsiUrl -OutFile ~\wix6-installer.msi
          Write-Host "Wix MSI下载完成"
          # 禁用驱动签名强制（仅当前会话有效）
          bcdedit /set testsigning on
          # 静默安装Wix（不显示界面，安装到默认路径）
          msiexec /i ~\wix6-installer.msi /quiet /norestart

          # 验证安装是否成功
          $wixInstallPath = "C:\Program Files\WiX Toolset v6.0\bin"
          if (-not (Test-Path "$wixInstallPath\wix.exe")) {
            Write-Error "Wix 安装失败"
            exit 1
          }
      - name: 设置 Wix 环境
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          echo "$wixInstallPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 缓存 Rust
        uses: actions/cache@v4
        id: cache-rust
        with:
          path: |
            ~/.cargo
            ./target
          key: rust-${{ runner.os }}-1.88.0
      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@master
        if: steps.cache-rust.outputs.cache-hit != 'true'
        with:
          toolchain: ${{ matrix.rust }}

      - name: 安装 Go
        uses: actions/setup-go@v5
        with:
          go-version: ~1.24
          cache-dependency-path: |
            crates/library-sing-box/go.sum

      - name: 拉取UI代码
        uses: actions/checkout@v4
        with:
          repository: lingting-projects/rust-nc-ui
          path: ui
      - name: 安装 Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.20.3
          cache: 'yarn'
          cache-dependency-path: |
            ui/yarn.lock

      - name: 构建项目
        run: |
          npm install -g tyarn
          sh scripts/package.sh -b -t -i -s
          mkdir -p artifacts
          cp -f lingting-nc.tar.gz artifacts/${{ runner.os }}-lingting-nc.tar.gz
          cp -f lingting-nc.msi artifacts/${{ runner.os }}-lingting-nc.msi

      - name: 上传
        uses: actions/upload-artifact@v4
        with:
          name: BUILD
          path: artifacts/*

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 设置参数
        run: |
          VERSION=$(grep "version =" Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "TAG_NAME=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_NAME=$VERSION" >> $GITHUB_ENV

      - name: 下载
        uses: actions/download-artifact@v4
        with:
          name: BUILD
          path: artifacts

      - name: 发布
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          body: ""
          draft: false
          prerelease: false
          files: |
            artifacts/*