name: Release Ci

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2025 ]
        rust: [ stable ]

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 下载 Wix
        if: ${{ runner.os == 'Windows' && steps.cache-wix.outputs.cache-hit != 'true'}}
        shell: pwsh
        run: |
          $url = "https://github.com/wixtoolset/wix/releases/download/v6.0.1/wix-cli-x64.msi"
          $path = "${{ runner.temp }}\wix.msi"
          echo "WIX_MSI_PATH=$path" >> $env:GITHUB_ENV
          Invoke-WebRequest -Uri $url -OutFile $path -UseBasicParsing
          Write-Host "Wix MSI下载完成"
          $expectedHash = "b45393bb6069c5a52545c4c194b198ba72f3df30f74e278012b88265a6912490"
          $actualHash = (Get-FileHash $path -Algorithm SHA256).Hash
          echo "Wix MSI下载完成, SHA256: $actualHash"
          if ($actualHash -ne $expectedHash) {
            Write-Error "安装包哈希校验失败"
            exit 1
          }
      - name: 设置 Wix 环境
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          # 禁用驱动签名强制（仅当前会话有效）
          bcdedit /set testsigning on
          # 静默安装Wix（不显示界面，安装到默认路径）
          msiexec /i ${{ env.WIX_MSI_PATH }} /quiet /norestart

      - name: 缓存 Rust
        uses: actions/cache@v4
        id: cache-rust
        with:
          path: |
            ~/.cargo
            ${{ github.workspace }}/target
          key: rust-${{ runner.os }}-1.88.0
      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@master
        if: steps.cache-rust.outputs.cache-hit != 'true'
        with:
          toolchain: ${{ matrix.rust }}

      - name: 安装 Go
        uses: actions/setup-go@v5
        with:
          go-version: ~1.24
          cache-dependency-path: |
            crates/library-sing-box/go.sum

      - name: 拉取UI代码
        uses: actions/checkout@v4
        with:
          repository: lingting-projects/rust-nc-ui
          path: ui
      - name: 安装 Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.20.3
          cache: 'yarn'
          cache-dependency-path: |
            ui/yarn.lock

      - name: 构建项目
        shell: bash
        run: |
          npm install -g tyarn
          if [ -d ui ]; then
            cd ui
            tyarn install
            cd ..
          fi
          ls -lh .
          sh scripts/package.sh -b -t -i
          cd ${{ github.workspace }}
          mkdir -p artifacts
          cp -f target/lingting-nc.tar.gz artifacts/${{ runner.os }}-lingting-nc.tar.gz
          if [ -f target/lingting-nc.msi ]; then
            cp -f target/lingting-nc.msi artifacts/${{ runner.os }}-lingting-nc.msi
          fi

#      - name: 上传
#        uses: actions/upload-artifact@v4
#        with:
#          name: BUILD
#          path: artifacts/*
#
#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: 设置参数
#        run: |
#          VERSION=$(grep "version =" Cargo.toml | head -n 1 | cut -d '"' -f 2)
#          echo "TAG_NAME=$VERSION" >> $GITHUB_ENV
#          echo "RELEASE_NAME=$VERSION" >> $GITHUB_ENV
#
#      - name: 下载
#        uses: actions/download-artifact@v4
#        with:
#          name: BUILD
#          path: artifacts
#
#      - name: 发布
#        uses: softprops/action-gh-release@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          name: ${{ env.RELEASE_NAME }}
#          body: ""
#          draft: false
#          prerelease: false
#          files: |
#            artifacts/*